name: Go

on:
  push:
    tags: v*

jobs:
  build_windows64:
    name: Build Windows 64
    runs-on: ubuntu-latest
    env: 
      FILENAME: wpp_broadcast_message_windows64x.exe
      GOOS: windows
      GOARCH: amd64
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Build
        run: go build -o $FILENAME ./main.go

      - name: Tag and Release and Upload
        uses: jasondavis303/tag-and-release-and-upload@v1.2.0
        with:
          # secrets.GITHUB_TOKEN, or a token with read/write access to the repo
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Version to create
          version: ${{ github.ref }}
          # json string array of assets paths to upload to the release. E.G. '[ "win-x64.zip", "linux-x24.zip" ]'
          assets: '[ "wpp_broadcast_message_windows64x.exe" ]'
          # bool value to overwrite assets
          overwrite: true

  build_windows86:
    name: Build Windows 86
    runs-on: ubuntu-latest
    env: 
      FILENAME: wpp_broadcast_message_windows86x.exe
      GOOS: windows
      GOARCH: 386
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Build
        run: go build -o $FILENAME ./main.go

      - name: Tag and Release and Upload
        uses: jasondavis303/tag-and-release-and-upload@v1.2.0
        with:
          # secrets.GITHUB_TOKEN, or a token with read/write access to the repo
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Version to create
          version: ${{ github.ref }}
          # json string array of assets paths to upload to the release. E.G. '[ "win-x64.zip", "linux-x24.zip" ]'
          assets: '[ "wpp_broadcast_message_windows86x.exe" ]'
          # bool value to overwrite assets
          overwrite: true

  build_linux_amd64:
    name: Build Linux amd64
    runs-on: ubuntu-latest
    env: 
      FILENAME: wpp_broadcast_message_linux_amd64
      GOOS: linux
      GOARCH: amd64
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Build
        run: go build -o $FILENAME ./main.go

      - name: Tag and Release and Upload
        uses: jasondavis303/tag-and-release-and-upload@v1.2.0
        with:
          # secrets.GITHUB_TOKEN, or a token with read/write access to the repo
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Version to create
          version: ${{ github.ref }}
          # json string array of assets paths to upload to the release. E.G. '[ "win-x64.zip", "linux-x24.zip" ]'
          assets: '[ "${{ env.FILENAME }}" ]'
          # bool value to overwrite assets
          overwrite: true
